import { useState, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Search, Scan, Box, Lightbulb, Trophy } from 'lucide-react';
import Navigation from '../components/Navigation';
import { useToast } from "@/components/ui/use-toast";
import CameraPopup from '../components/CameraPopup';

const Index = () => {
  const [isHovered, setIsHovered] = useState('');
  const [showCamera, setShowCamera] = useState(false);
  const [capturedImage, setCapturedImage] = useState<string | null>(null);
  const videoRef = useRef<HTMLVideoElement>(null);
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isCameraOpen, setIsCameraOpen] = useState(false);

  const features = [
    {
      id: 'identify',
      title: 'Identify Objects',
      icon: Box,
      path: '/object-identification',
      description: 'Scan and learn about objects around you',
      animation: 'animate-slideRight'
    },
    {
      id: 'explore',
      title: 'Explore DIY Ideas',
      icon: Lightbulb,
      path: '/diy-projects',
      description: 'Discover exciting DIY projects',
      animation: 'animate-scale'
    },
    {
      id: 'leaderboard',
      title: 'View Leaderboard',
      icon: Trophy,
      path: '/leaderboard',
      description: 'See top creators and innovators',
      animation: 'animate-slideLeft'
    }
  ];

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'environment',
          width: { ideal: 1280 },
          height: { ideal: 720 }
        } 
      });
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        setShowCamera(true);
      }
    } catch (err) {
      console.error('Camera error:', err);
      toast({
        title: "Camera Error",
        description: "Unable to access camera. Please check permissions and try again.",
        variant: "destructive"
      });
    }
  };

  const captureImage = () => {
    if (videoRef.current) {
      const canvas = document.createElement('canvas');
      canvas.width = videoRef.current.videoWidth;
      canvas.height = videoRef.current.videoHeight;
      const ctx = canvas.getContext('2d');
      if (ctx) {
        ctx.drawImage(videoRef.current, 0, 0);
        const imageDataURL = canvas.toDataURL('image/jpeg');
        setCapturedImage(imageDataURL);
        stopCamera();
      }
    }
  };

  const stopCamera = () => {
    if (videoRef.current && videoRef.current.srcObject) {
      const stream = videoRef.current.srcObject as MediaStream;
      const tracks = stream.getTracks();
      tracks.forEach(track => track.stop());
      videoRef.current.srcObject = null;
      setShowCamera(false);
    }
  };

  const handleScanClick = () => {
    setIsCameraOpen(true);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-black text-white">
      <Navigation />
      
      {/* Hero Section */}
      <section className="pt-32 pb-20 px-4">
        <div className="max-w-7xl mx-auto text-center">
          <h1 className="font-orbitron text-4xl md:text-6xl font-bold mb-6 animate-slideDown">
            Welcome to EduScope
            <span className="block text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400">
              Innovate, Create, Learn
            </span>
          </h1>
          
          {/* Camera Section */}
          <div className="relative mt-8">
            {showCamera ? (
              <div className="relative max-w-2xl mx-auto">
                <div className="w-full h-0 pb-[100%] relative">
                  <video
                    ref={videoRef}
                    autoPlay
                    playsInline
                    className="absolute top-0 left-0 w-full h-full rounded-xl"
                  />
                </div>
                <div className="absolute bottom-4 left-0 right-0 flex justify-center gap-4">
                  <button
                    onClick={captureImage}
                    className="px-6 py-3 bg-green-500 rounded-full font-montserrat shadow-lg hover:bg-green-600 transition-all"
                  >
                    Capture
                  </button>
                  <button
                    onClick={stopCamera}
                    className="px-6 py-3 bg-red-500 rounded-full font-montserrat shadow-lg hover:bg-red-600 transition-all"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            ) : capturedImage ? (
              <div className="max-w-2xl mx-auto">
                <img src={capturedImage} alt="Captured" className="w-full rounded-xl" />
                <button
                  onClick={() => setCapturedImage(null)}
                  className="mt-4 px-6 py-3 bg-purple-500 rounded-full font-montserrat shadow-lg hover:bg-purple-600 transition-all"
                >
                  Take Another Photo
                </button>
              </div>
            ) : (
              <button
                onClick={handleScanClick}
                className="group relative px-8 py-4 bg-white/10 rounded-xl border border-white/20 backdrop-blur-lg transition-all duration-300 hover:bg-white/20 animate-float"
                onMouseEnter={() => setIsHovered('scan')}
                onMouseLeave={() => setIsHovered('')}
              >
                <div className="flex items-center space-x-3">
                  <Scan className="w-6 h-6" />
                  <span className="font-montserrat text-lg">Scan an Object</span>
                </div>
                <div
                  className={`absolute inset-0 rounded-xl bg-purple-500/20 transition-opacity duration-300 ${
                    isHovered === 'scan' ? 'opacity-100' : 'opacity-0'
                  }`}
                />
              </button>
            )}
          </div>
        </div>
      </section>

      {/* Features Grid */}
      <section className="py-20 px-4">
        <div className="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-8">
          {features.map((feature) => (
            <Link
              key={feature.id}
              to={feature.path}
              className={`group relative p-6 bg-white/5 rounded-xl border border-white/10 backdrop-blur-lg transition-all duration-300 hover:bg-white/10 ${feature.animation}`}
              onMouseEnter={() => setIsHovered(feature.id)}
              onMouseLeave={() => setIsHovered('')}
            >
              <div className="flex flex-col items-center text-center space-y-4">
                <feature.icon className="w-8 h-8" />
                <h3 className="font-orbitron text-xl font-semibold">{feature.title}</h3>
                <p className="font-montserrat text-white/70">{feature.description}</p>
              </div>
              <div
                className={`absolute inset-0 rounded-xl bg-purple-500/20 transition-opacity duration-300 ${
                  isHovered === feature.id ? 'opacity-100' : 'opacity-0'
                }`}
              />
            </Link>
          ))}
        </div>
      </section>

      {/* Footer */}
      <footer className="py-8 px-4 border-t border-white/10">
        <div className="max-w-7xl mx-auto flex flex-col md:flex-row justify-between items-center">
          <div className="flex space-x-6 mb-4 md:mb-0">
            <Link to="/help" className="font-montserrat text-white/70 hover:text-white transition-colors">Help</Link>
            <Link to="/support" className="font-montserrat text-white/70 hover:text-white transition-colors">Support</Link>
            <Link to="/feedback" className="font-montserrat text-white/70 hover:text-white transition-colors">Feedback</Link>
          </div>
          <p className="font-montserrat text-white/50">Â© 2025 EduScope. All rights reserved.</p>
        </div>
      </footer>

      <CameraPopup
        isOpen={isCameraOpen}
        onClose={() => setIsCameraOpen(false)}
        onCapture={(imageData) => {
          setCapturedImage(imageData);
          setIsCameraOpen(false);
        }}
      />
    </div>
  );
};

export default Index;

